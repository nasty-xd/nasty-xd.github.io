import sqlite3

# Подключение к базе данных (файл fag.db будет создан)
connection = sqlite3.connect('faq.db')
cursor = connection.cursor()

# Создание курсора(Курсор-это объект, который позволяет выполнять SQL-запросы(создание таблиц, добавление данных, чтение информации))
# Создание таблицы для хранения вопросов и ответов
cursor.execute('''
CREATE TABLE IF NOT EXISTS questions_answers (
    id INTEGER PRIMARY KEY AUTOINCREMENT, 
    question TEXT NOT NULL,
    answer TEXT NOT NULL,
    category TEXT NOT NULL)
''')
print('Таблица создана')

# Добавление данных(executemany-добавляет все записи из списка в таблицу)
data = [
    ('Что такое комментарии?', 'Комментарии — это строки текста, которые игнорируются интерпретатором и служат для пояснений кода. Они полезны для документирования, объяснения логики и улучшения читаемости программы. В Python существует два вида комментариев: однострочные и многострочные. Примеры: однострочный комментарий: # Это однострочный комментарий', 'Ввод/вывод данных. Переменные'),
    ('Что такое print?', 'Функция print() является одной из базовых функций Python и предназначена для вывода информации на экран. Она позволяет выводить строки, числа и результаты выражений. Например: print(""Hello, World!"") Выводит: Hello, World!', 'Ввод/вывод данных. Переменные'),
    ('Что такое переменные?', 'Переменная — это именованная область памяти, в которой хранится значение. В Python переменная создаётся в момент присваивания значения.', 'Ввод/вывод данных. Переменные'),
    ('Что такое типы данных?', 'Python поддерживает несколько встроенных типов данных, которые можно разделить на следующие категории: Числовые типы: целые числа (int), числа с плавающей точкой (oat), комплексные числа (complex). Последовательности: строки (str), списки (list), кортежи (tuple). Множества: множества (set), неизменяемые множества (frozenset). Отображения: словари (dict). Логический тип: булевы значения (bool).', 'Ввод/вывод данных. Переменные'),
    ('Что такое int?', 'Целые числа (int) Хранят целочисленные значения. a = 10 # intb = -5 # int', 'Ввод/вывод данных. Переменные'),
    ('Что такое float?', 'Числа с плавающей точкой (float) Используются для хранения вещественных чисел.pi = 3.14 # float temperature = -273.15 # float', 'Ввод/вывод данных. Переменные'),
    ('Что такое complex?', 'Комплексные числа (complex) Хранят комплексные числа, имеющие действительную и мнимую части. z = 2 + 3j # complex', 'Ввод/вывод данных. Переменные'),
    ('Что такое bool?', 'Логический тип может принимать только два значения: True (истина) или False (ложь). Пример: is_active = True is_logged_in = False', 'Ввод/вывод данных. Переменные'),
    ('Что такое str?', 'Строки используются для хранения текста. В Python строки можно заключать в одинарные, двойные или тройные кавычки. В Python тексты (строки) можно складывать и умножать.', 'Ввод/вывод данных. Переменные'),
    ('Что такое преобразование типов?', 'Преобразование типов (type casting) — это процесс изменения типа данных одного значения в другой. Преобразование выполняется с помощью встроенных функций. Оно требуется, когда нужно преобразовать один тип данных в другой, чтобы избежать ошибок или получить нужный результат.', 'Ввод/вывод данных. Переменные'),
    ('Что такое input?', 'Функция input() в Python используется для получения данных от пользователя. При вызове функции программа приостанавливает своё выполнение и ожидает, пока пользователь введёт значение и нажмёт клавишу "Enter".', 'Ввод/вывод данных. Переменные'),
    
    
    ('Что такое форматирование строк?', 'Форматирование строк в Python — это способ вставки значений переменных в строку, преобразования данных и управления выводом. Python предоставляет несколько методов для форматирования строк: Конкатенация строк с помощью оператора + Метод str.format() f-строки (f-strings) Оператор %', 'Форматирование строк'),
    ('Что такое str.format()?', 'Метод format() заменяет специальные плейсхолдеры {} в строке на значения, которые передаются как аргументы методу. name = "Алиса" age = 25 # Пример использования метода format message = "Меня зовут {}, и мне {} лет.".format(name, age) print(message)', 'Форматирование строк'),
    ('Что такое f-strings?', 'f-строки появились в Python 3.6 и предоставляют самый удобный и быстрый способ форматирования строк. Для использования fстрок перед строкой нужно добавить префикс f, а внутри строки можно вставлять переменные в фигурных скобках {}', 'Форматирование строк'),
    ('Что такое оператор %?', 'Это старый способ форматирования строк, который похож на синтаксис языка C. Несмотря на то, что его использование уменьшается, он все еще поддерживается и может быть полезен в некоторых случаях.', 'Форматирование строк'),


    ('Что такое арифметические операции?', 'Арифметические операции это базовые операции, которые выполняются над числовыми данными. Python поддерживает множество таких операций, которые позволяют выполнять сложные вычисления. В этой лекции мы разберем основные арифметические операции, такие как сложение, вычитание, умножение и другие, а также рассмотрим их применение на примерах.', 'Арифметические операции'),
    ('Что такое сложение?', 'Сложение это операция которая возвращает сумму двух чисел', 'Арифметические операции'),
    ('Что такое вычитание?', 'Вычитание это операция которая возвращает разность двух чисел', 'Арифметические операции'),
    ('Что такое умножение?', 'Умножение это операция которая возвращает произведение двух чисел', 'Арифметические операции'),
    ('Что такое деление?', 'Деление это операция которая возвращает частное от деления двух чисел и всегда дает результат с плавающей точкой', 'Арифметические операции'),
    ('Какие есть виды деления?', '1. Обычное деление (/) возвращает float 2.Целочисленное деление (//) возвращает только целую часть от деления 3. Остаток от деления (%) возвращает остаток', 'Арифметические операции'),
    ('Приоритет операций?', 'В Python, как и в математике, операции выполняются с определённым приоритетом. Например: Сначала выполняются операции возведения в степень. Затем умножение, деление, целочисленное деление и остаток от деления. В последнюю очередь выполняются сложение и вычитание. Если в выражении несколько операторов, операции с более высоким приоритетом выполняются первыми. Если приоритеты одинаковые, выражения вычисляются слева направо. • Для изменения порядка выполнения операций используются круглые скобки', 'Арифметические операции'),
    
    
    ('Что такое встроенные функции?', 'Python предлагает богатый набор встроенных функций, которые доступны для использования без необходимости импортировать какие-либо модули. Эти функции помогают выполнять задачи, такие как работа с числами, строками, коллекциями, а также помогают обрабатывать ошибки и взаимодействовать с пользователем. Встроенные функции экономят время разработчика, поскольку они уже оптимизированы и реализованы в самом языке.', 'Встроенные функции'),
    ('Что такое abs?', 'Функция возвращает абсолютное значение числа. print(abs(-7)) print(abs(3.5))', 'Встроенные функции'),
    ('Что такое round?', 'Функция округляет число до заданного количества знаков после запятой. Если количество знаков не указано, округляет до ближайшего целого числа. print(round(3.14159, 2)) print(round(7.5))', 'Встроенные функции'),
    ('Что такое pow?', 'Возводит число в степень. Это аналог оператора **. print(pow(2, 3))', 'Встроенные функции'),
    ('Что такое divmod?', 'Возвращает пару (частное, остаток) от деления. print(divmod(9, 4))', 'Встроенные функции'),
    ('Что такое системы счисления?', 'В Python есть несколько встроенных функций, которые позволяют преобразовывать числа между различными системами счисления: двоичной, шестнадцатеричной и восьмеричной. Эти системы часто используются в программировании, особенно при работе с низкоуровневыми операциями, такими как обработка данных, связанных с памятью или сетями.', 'Встроенные функции'),
    ('Что такое двоичная система счисления?', 'Двоичная система счисления — это основа всех современных цифровых устройств. В этой системе используются только два символа: 0 и 1. Компьютеры работают с двоичной системой, так как в цифровых схемах легко различать два состояния: включено (1) и выключено (0).', 'Встроенные функции'),
    ('Что такое шестнадцатеричная система счисления?', 'Шестнадцатеричная система счисления (основание 16) использует символы от 0 до 9 и от A до F, где: A = 10, B = 11, C = 12, D = 13, E = 14, F = 15. Эта система счисления удобна для представления больших двоичных чисел, так как каждая шестнадцатеричная цифра соответствует четырем битам. Функция hex() преобразует целое число в строку, представляющую его шестнадцатеричный эквивалент.', 'Встроенные функции'),
    ('Что такое восьмеричная система счисления?', 'Восьмеричная система счисления (основание 8) использует символы от 0 до 7. Каждая восьмеричная цифра соответствует трем битам, и эта система часто используется для представления прав доступа в файловых системах Unix и Linux. Функция oct() преобразует целое число в строку, представляющую его восьмеричный эквивалент.', 'Встроенные функции'),


    ('Как импортировать модуль ?', 'Для использования внешних модулей в Python их необходимо импортировать с помощью ключевого слова import. Например, встроенный в Python модуль для работы с математическими функциями это math. import math После этого можно использовать функции, предоставляемые модулем, добавляя перед ними math..', 'Модуль math'),
    ('Что такое модуль math?', 'Модуль math в Python предоставляет множество математических функций и констант, полезных для решения различных задач. Он содержит: тригонометрические функции, логарифмы, функции для работы с числами, математические константы и другие полезные инструменты. Можно импортировать конкретную функцию из модуля, если не хочется каждый раз указывать math.', 'Модуль math'),
    ('Какие основные функции модуля math?', '1. math.sqrt возвращает корень числа 2.math.pow возводит число в степень', 'Модуль math'),
    ('Какие есть тригонометрические функции ?', 'sin(x), cos(x), tan(x), asin(x), acos(x), atan(x), degrees(x), radians(x)', 'Модуль math'),
    ('Логарифмы в модуле math', '1. math.log(x) - натуральный логарифм числа 2. math.log(x, base) - логарифм числа по указанному основанию 3. math.log10(x) - логарифм по основанию 10', 'Модуль math'),
    ('Факториал в модуле math', 'math.factorial - произведение всех чисел от 1 до n', 'Модуль math'),
    ('Гипотенуза в модуле math', 'math.hypot - вычисляет длину гипотенузы прямоугольного треугольника с заданными катетами', 'Модуль math'),
    ('Абсолютное значение в модуле math', 'math.fabs - возвращает абсолютное значение числа', 'Модуль math'),
    ('Округление в модуле math', 'math.trunc - отбрасывает дробную часть числа', 'Модуль math'),


    ('Что такое модуль datatime?', 'Для работы с датой и временем в Python можно использовать модуль datetime, который предоставляет удобные методы для работы с датами, временем, интервалами и форматированием. Для начала нужно импортировать модуль datetime: import datetime', 'datatime and random'),
    ('Как получить текущую дату и время?', 'Чтобы получить текущую дату и время, используйте: current_datetime = datetime.datetime.now() print("Текущая дата и время:", current_datetime)', 'datatime and random'),
    ('Как получить только дату или время?', 'Можно отдельно получить только дату или время: current_date = current_datetime.date() current_time = current_datetime.time() print("Текущая дата:", current_date) print("Текущее время:", current_time)', 'datatime and random'),
    ('Как форматировать дату и время?', 'Используйте метод strftime, чтобы отформатировать дату и время в нужный вам формат formatted_datetime = current_datetime.strftime("-d-%m-%Y %H:%M:%S Day: %A") print("Отформатированная дата и время:", formatted_datetime)', 'datatime and random'),
    ('Как добавлять или вычислять время?', 'Можете добавить или вычесть дни, часы и другие временные промежутки с помощью timedelta # Добавить 10 дней new_date = current_datetime + datetime.timedelta(days=10)', 'datatime and random'),
    ('Как преобразовать строку в дату?', '"Если у вас есть строка с датой, её можно преобразовать в объект datetime с помощью метода strptime date_string = ""20-09-2024 15:30:00"" parsed_date = datetime.datetime.strptime(date_string, ""d-%m-%Y %H:%M:%S"")', 'datatime and random'),
    ('Как узнать какой сегодня день недели?', '"Чтобы узнать, какой сегодня день недели (0 = Понедельник, 6 = Воскресенье): current_day_of_week = datetime.datetime.now().weekday()', 'datatime and random'),
    ('Как узнать номер дня в году?', '"Чтобы узнать номер дня в году: current_day_of_year = datetime.datetime.now().timetuple().tm_yday', 'datatime and random'),
    ('Как создать дату и время?', '"Чтобы создать объект, представляющий определенную дату и время можно указать год, месяц, день, час, минуту и секунду: date_time = datetime.datetime(2024, 9, 24, 14, 30, 0)', 'datatime and random'),
    ('Как извлечь год, месяц или день из даты?', 'Если есть объект datetime или date, можно получить год, месяц или день current_date_time = datetime.datetime.now() year = current_date_time.year month = current_date_time.month day = current_date_time.day', 'datatime and random'),
    ('Что такое pytz?', 'Если нужно работать с часовыми поясами, то для этого есть библиотека pytz . Она позволяет легко конвертировать время из одногочасового пояса в другой. Убедитесь, что модуль pytz установлен. Если нет, его можно установить с помощью команды в Терминале: pip install pytz', 'datatime and random'),
    ('Что такое модуль random?', 'Модуль random управляет генерацией случайных чисел. Его основные функции: Функция random() возвращает случайное число с плавающей точкой в промежутке от 0.0 до 1.0. Если же нам необходимо число из большего диапазона, скажем от 0 до 100, то мы можем соответственно умножить результат функции random на 100.', 'datatime and random'),
    ('Что такое randint?', 'Функция randint(min, max) возвращает случайное целое число в промежутке между двумя значениями min и max. number = random.randint(5,15)', 'datatime and random'),
    ('Что такое randrange?', 'Функция randrange() возвращает случайное целое число из определенного набора чисел. Она имеет три формы: 1. randrange(stop) : в качестве набора чисел, из которых происходит извлечение случайного значения, будет использоваться диапазон от 0 до числа stop 2.randrange(start, stop) : набор чисел представляет диапазон от числа start до числа stop 3.randrange(start, stop, step) : набор чисел представляет диапазон от числа start до числа stop, при этом каждое число в диапазоне отличается от предыдущего на шаг step', 'datatime and random'),


    ('Что такое логика в программировании?', 'В программировании важно уметь принимать решения в зависимости от условий. Это и есть основа логики в Python. Основным инструментом для реализации логики является условный оператор if , который позволяет выполнять разные действия в зависимости от выполнения определённых условий. Логика — это набор правил, на основе которых принимаются решения. В Python для работы с логикой используются логические выражения, которые оцениваются как True (истина) или False (ложь).', 'Оператор условия if'),
    ('Основные опрераторы сложения', 'Основные операторы сравнения: == — равно != — не равно > — больше < — меньше >= — больше или равно <= — меньше или равно', 'Оператор условия if'),
    ('Что такое оператор if?', 'Оператор if — это способ для программы принимать решения на основе условий. Он проверяет условие (логическое выражение) и выполняет блок кода, если это условие истинно ( True ). Пример: Если условие age >= 18 истинно, программа выполнит команду print.  age = 18 if age >= 18: print(""Вы совершеннолетний!"")', 'Оператор условия if'),
    ('Что такое оператор if-else?', 'Иногда нужно выполнить один блок кода, если условие истинно, и другой, если оно ложно. Для этого используется конструкция if-else.', 'Оператор условия if'),
    ('Что такое оператор if-elif-else?', 'Когда нужно проверить несколько условий одно за другим, используется конструкция if-elif-else. if условие1: # код, который выполнится, если условие1 истинно elif условие2: # код, который выполнится, если условие2 истинно else: # код, который выполнится, если все условия ложны. Пример: Здесь программа будет проверять каждый блок условий по очереди до тех пор, пока одно из них не окажется истинным. if age < 12: print(""Детский билет"") elif age < 18: print(""Подростковый билет"") else: print(""Взрослый билет"")', 'Оператор условия if'),
    ('Что такое match-case?', 'Оператор match-case - новый оператор в Python 3.10, который позволяет писать логику, аналогичную switch-case в других языках программирования. Удобен для работы с множеством вариантов (паттернов). Сравнение с if-elif-else для простых и сложных условий. case _: — это аналог блока else и срабатывает, если ни один из предыдущих случаев не подошёл.', 'Оператор условия if'),
    ('Что такое тернарный оператор?', 'Тернарный оператор — это специальный синтаксический элемент в Python, который позволяет реализовать условные выражения на одной строке. Этот оператор упрощает запись условных конструкций и делает код более компактным. Название "тернарный" происходит от того, что он принимает три операнда: условие, действие, если условие истинно, и действие, если оно ложно. Тернарный оператор — это краткая форма записи if-else. Он позволяет выполнить простое условие в одной строке. Основной задачей тернарного оператора является выбор одного из двух значений в зависимости от выполнения условия. В Python он реализован с помощью конструкции: результат = выражение1 if условие else выражение2 Пример:  age = 10 status = "Совершеннолетний" if age >= 18 else "Несовершеннолетний" print(status) Несовершеннолетний Сравнение с обычными условными операторами age = 10 if age >= 18: status = "Совершеннолетний" else: status = "Несовершеннолетний" print(status)', 'Оператор условия if'),
    ('Что такое логические операторы?', 'Условия в Python могут быть сложными и включать логические операторы: and — логическое ""И"" (True, если оба условия истинны), or — логическое ""ИЛИ"" (True, если хотя бы одно из условий истинно), not — логическое ""НЕ"" (возвращает противоположное значение условия - инвертирует значение)', 'Оператор условия if'),


    ('Что такое цикл for?', 'Цикл for работает, если известно заранее, сколько повторений (итераций) требуется сделать. Например, нужно распечатать 10 раз слово Hello for i in range(10): print(Hello)', 'Операторы цикла for и while'),
    ('Что такое переменная цикла?', 'Когда цикл впервые начинает работу Python устанавливает значение переменной цикла i = 0. Каждый раз когда мы повторяем тело цикла Python увеличивает значение переменной на 1.', 'Операторы цикла for и while'),
    ('Что такое range?', 'Функция range() может принимать от одного до трех параметров: range(n), range(n, m), range(n, m, k) первый параметр – это старт последовательности (включительно); второй параметр – это стоп последовательности (не включительно); третий параметр – это величина шага. Функция range() может генерировать только целые числа, включая отрицательные. Величина шага не может равняться нулю. range(10)___0, 1, 2, 3, 4, 5, 6, 7, 8, 9 range(1, 10)____1, 2, 3, 4, 5, 6, 7, 8, 9 range(3, 7)_____3, 4, 5, 6 range(7, 3)_____пустая последовательность range(2, 15, 3)_____2, 5, 8, 11, 14 range(9, 2, -1)_____9, 8, 7, 6, 5, 4, 3 range(3, 10, -2)____пустая последовательность', 'Операторы цикла for и while'),
    ('Как сделать подсчёт колличества?', 'Cостоит из двух шагов: 1. Создание переменной счетчика и придание ей первоначального значения: counter = 0 2. Увеличение переменной счетчика на 1: counter = counter + 1  counter = 0', 'Операторы цикла for и while'),
    ('Что такое while?', 'Цикл while выполнялся до наступления некоторого события, и количество итераций в этом случае заранее оценить сложно. Структура цикла while в Python выглядит так: while условие: i = 0', 'Операторы цикла for и while'),
    ('Что такое break?', '"Иногда бывает нужно прервать выполнение цикла преждевременно. Оператор break прерывает ближайший цикл for или while. Оператор прерывания цикла break позволяет ускорять программы, так как не выполняются лишние итерации.', 'Операторы цикла for и while'),
    ('Что такое continue?', 'Оператор continue позволяет перейти к следующей итерации цикла for или while до завершения всех команд в теле', 'Операторы цикла for и while'),


    ('Как создать строку?', 'Для создания строки используются парные кавычки " или ""', 'Строки'),
    ('Как посчитать длину строки?', 'Для определения строки исспользуется функция len: s = "Hello, Python" n = len(s) print(n)', 'Строки'),
    ('Что такое операторы + и *?', 'Операторы + и * можно использовать для строк. Оператор + сцепляет две и более строк. Это называется конкатенацией строк. Оператор повторяет строку указанное количество раз.', 'Строки'),
    ('Что такое оператор принадлежности in?', 'Оператор принадлежности in. С помощью оператора in можно проверить является ли одна строка подстрокой другой', 'Строки'),
    ('Что такое срез строки?', 'С помощью среза можно получить несколько символов строки, создав диапазон индексов разделенных двоеточием.', 'Строки'),
    ('Что такое метод?', 'функция, применимая к объекту', 'Строки'),


    ('Что такое списки?', 'Для работы с наборами данных Python предоставляет такие встроенные типы как списки, кортежи и словари. Список (list) представляет тип данных, который хранит набор или последовательность элементов. Для создания списка в квадратных скобках ([]) через запятую перечисляются все его элементы. Во многих языках программирования есть аналогичная структура данных, которая называется массив. Значения, заключенные в квадратные скобки и отделенные запятыми, называются элементами списка. numbers = [1, 2, 3, 4, 5] print(numbers) [1, 2, 3, 4, 5] Также для создания списка можно использовать конструктор list(). numbers1 = [] # Создание пустого списка numbers2 = list() # Создание пустого списка Конструктор list для создания списока может принимать другой список: numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9] numbers2 = list(numbers) Встроенная функция list(), которая помимо создания пустого списка может преобразовывать некоторые типы объектов в списки. numbers = list(range(5)) print(numbers)', 'Списки'),
    ('Что такое индексация?', 'Списки в Python — это упорядоченные структуры данных, что значит, что каждый элемент имеет свой индекс. Это позволяет легко обращаться к элементам списка, изменять их или выполнять другие операции. Каждый элемент имеет свой индекс, или номер. Индексация начинается с нуля (0). Чтобы извлечь элемент, надо после имени переменной указать в квадратных скобках индекс необходимого элемента: a[0] Пример обращения к элементам списка по индексу: my_list = [10, 20, 30, 40] print(my_list[0]) # Вывод: 10 print(my_list[3]) # Вывод: 40 В Python существует также индексация с конца. Начинается с -1: Вывод последнего элемента: fruits = ["apple", "banana", "cherry"] print(fruits[-1])', 'Списки'),
    ('Что такое перебор элементов?', '"Для перебора элементов можно использовать как цикл for, так и цикл while.', 'Списки'),
    ('Методы и функции по работе со списками', 'Для управления элементами списки имеют целый ряд методов. Некоторые из них: append(item): добавляет элемент item в конец списка insert(index, item): добавляет элемент item в список по индексу index remove(item): удаляет элемент item. Удаляется только первое вхождение элемента. Если элемент не найден, генерирует исключение ValueError clear(): удаление всех элементов из списка index(item): возвращает индекс элемента item. Если элемент не найден, генерирует исключение ValueError pop([index]): удаляет и возвращает элемент по индексу index. Если индекс не передан, то просто удаляет последний элемент. count(item): возвращает количество вхождений элемента item в список sort([key]): сортирует элементы. По умолчанию сортирует по возрастанию. Но с помощью параметра key мы можем передать функцию сортировки. reverse(): расставляет все элементы в списке в обратном порядке len(list): возвращает длину списка sorted(list, [key]): возвращает отсортированный список min(list): возвращает наименьший элемент списка max(list): возвращает наибольший элемент списка', 'Списки'),
    ('Как добавить или удалить элемент?', 'Для добавления элемента применяются методы append() и insert, а для удаления - методы remove(), pop() и clear().  languages = ["Python", "Java", "C#"] # добавляем в конец списка languages.append("PHP") # добавляем на вторую позицию languages.insert(1, "C++") print(languages) [Python, C++, Java, C#, PHP] # получаем индекс элемента i = languages.index("PHP") # удаляем по этому индексу removed_item = languages.pop(i) last_element = languages[-1] # удаляем последний элемент languages.remove(last_element) print(languages) # удаляем все элементы languages.clear() [Python, C++, Java]', 'Списки'),
    ('Что такое extend?', 'Метод extend() как бы расширяет один список, добавляя к нему элементы другого списка.', 'Списки'),
    ('Как проверить наличие элемента?', 'Если определенный элемент не найден, то методы remove и index генерируют исключение. Чтобы избежать подобной ситуации, перед операцией с элементом можно проверять его наличие с помощью ключевого слова in: languages = ["Python", "Java", "C#", "PHP", "C++"] item = "C#" # элемент для удаления if item in languages: languages.remove(item) print(languages)', 'Списки'),
    ('Что такое метод индекс?', 'Метод index() возвращает индекс первого элемента, значение которого равняется переданному в метод значению. Если элемент в списке не найден, то во время выполнения происходит ошибка.  names = [Gvido, Roman, Timur] position = names.index(Timur) print(position)', 'Списки'),
    ('Как сортировать?', 'Для сортировки по возрастанию применяется метод sort(): languages = ["Python", "Java", "C#", "PHP", "C++"] languages.sort() print(languages) [C#, C++, Java, PHP, Python] Если необходимо отсортировать данные в обратном порядке, то можно после сортировки применить метод reverse(): languages = [Python, Java, C#, PHP, C++] languages.sort() languages.reverse() print(languages)', 'Списки'),
    ('Что такое функции sum, min, max?', 'Встроенная функция sum() принимает в качестве параметра список чисел и вычисляет сумму его элементов. Встроенные функции min() и max() принимают в качестве параметра список и находят минимальный и максимальный элементы соответственно.                    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] print(Сумма всех элементов списка =, sum(numbers))', 'Списки'),
    ('Как посчитать количество элементов в списке?', 'Если необходимо узнать, сколько раз в списке присутствует тот или иной элемент, то можно применить метод count() . count(value) возвращает количество элементов в списке, значения которых равны переданному в метод значению Таким образом, в метод передается один параметр: value: значение, количество элементов, равных которому, нужно посчитать. Если значение в списке не найдено, то метод возвращает 0.      languages = ["Python", "Java", "C#","PHP", "C++", "Python", "Python"] lg1 = languages.count("Python") lg2 = languages.count(Java) lg3 = languages.count(javascript) print(lg1) print(lg2) print(lg3)', 'Списки'),
    ('Что такое списочное выражение?', 'Cписочное выражение (list comprehension) - генератором списка в Python, которая позволяет создавать заполненные списки. Эта конструкция занимает всего лишь одну строчку и имеет следующий формат: [выражение for переменная in коллекция] Стандартный способ создания списка: 1. Создается пустой список 2. С помощью цикла for и метода append добавляются данные в список Списочные выражения часто используются для инициализации списков. # Пример создания списка из чисел от 1..10 numbers = [] for i in range(1, 11): numbers.append(i) print(*numbers, sep = " ") 1 2 3 4 5 6 7 8 9 10 # Пример создания списка из чисел от 1..10 с помощью списочного выражения numbers = [i for i in range(1, 11)] print(*numbers, sep = " ") 1 2 3 4 5 6 7 8 9 10 # Cписок, заполненный квадратами целых чисел от 1 до 9 squares = [i ** 2 for i in range(1, 10)] print(squares) [1, 4, 9, 16, 25, 36, 49, 64, 81] # Cписок, заполненный символами строки chars = [c for c in Python] print(chars)', 'Списки'),


    ('Что такое словари?', '"Словари (dictionaries) — это структура данных в Python, которая позволяет хранить пары ключзначение. В отличие от списков или кортежей, элементы в словаре индексируются не порядковыми номерами, а уникальными ключами. Словари — это изменяемые структуры данных, что означает, что их можно модифицировать после создания.', 'Словари'),
    ('Что такое перебор элементов?', 'Перебор словаря можно осуществлять с помощью циклов. Можно итерировать по ключам (keys), значениям (values) или сразу по парам ключ-значение (items).', 'Словари'),
    ('Как извлечь данные из словаря?', 'Чтобы получить информацию из словаря, можно использовать ключи. Пример 1: Извлечение простых данных Допустим, вы хотите узнать столицу Эстонии или её население # Получение названия страны print(estonia[country]) # Получение столицы print(estonia[capital]) # Получение численности населения страны print(estonia[population])', 'Словари'),
    ('Как искать данные в словаре?', 'Вы можете искать данные по определённым критериям. Например, найдем все города, у которых население больше 50000: # Поиск городов с населением больше 50000 for city, info in estonia[cities].items(): if info[population] > 50000', 'Словари'),


    ('Что такое кортеж?', 'Кортеж (tuple) — это упорядоченная и неизменяемая коллекция элементов. Неизменяемость означает, что после создания кортежа вы не можете изменить, добавить или удалить его элементы. Кортежи создаются с помощью круглых скобок () . Основные свойства кортежей 1. Упорядоченность: Элементы кортежа располагаются в строгом порядке, и этот порядок сохраняется. 2. Неизменяемость: После создания кортеж нельзя изменить. 3. Могут содержать элементы разных типов: Кортежи могут хранить любые типы данных (строки, числа, другие кортежи, списки и т. д.). 4. Поддержка операций срезов: Как и списки, кортежи поддерживают индексацию и извлечение подмножества данных.', 'Кортежи и множества'),
    ('Как создать кортеж с одним элементом?', 'Для кортежа с одним элементом необходимо добавить запятую, иначе это будет считаться просто скобками. one_element_tuple = (5,) print(one_element_tuple) # Вывод: (5,)', 'Кортежи и множества'),
    ('Как создать кортеж с несколькими элементами?', ' multiple_elements = (1, 2, 3, ""Python"", [4, 5]) print(multiple_elements) # Вывод: (1, 2, 3, Python, [4, 5])', 'Кортежи и множества'),
    ('Какие основные операции с кортежами?', '1. Длина кортежа t = (1, 2, 3) print(len(t)) # Вывод: 3 2. Конкатенация (сложение) t1 = (1, 2) t2 = (3, 4) print(t1 + t2) # Вывод: (1, 2, 3, 4) 3. Повторение t = (5, 10) print(t * 3) # Вывод: (5, 10, 5, 10, 5, 10) 4. Проверка наличия элемента t = (1, 2, 3) print(2 in t) # Вывод: True print(5 in t) # Вывод: False 5. Извлечение среза t = (1, 2, 3, 4, 5) print(t[1:4]) # Вывод: (2, 3, 4)', 'Кортежи и множества'),
    ('Какие бывают методы кортежей?', 'Кортежи поддерживают ограниченное количество методов, так как они неизменяемы. Основные методы: 1. count(): Возвращает количество вхождений элемента. t = (1, 2, 2, 3) print(t.count(2)) # Вывод: 2 2. index(): Возвращает индекс первого вхождения элемента. t = (10, 20, 30, 40) print(t.index(30)) # Вывод: 2', 'Кортежи и множества'),
    ('Что такое распаковка кортежей?', 'Распаковка кортежей (tuple unpacking) — это процесс присваивания значений кортежа отдельным переменным. Python позволяет удобно распаковывать кортежи, распределяя их элементы по переменным в соответствии с их порядком.', 'Кортежи и множества'),
    ('Что такое zip?', '"zip() объединяет элементы из двух или более последовательностей (например, списков или кортежей) в кортежи. Она создает новый итератор, где каждый элемент является кортежем из элементов входных последовательностей.', 'Кортежи и множества'),
    ('Что такое enumerate?', 'enumerate() добавляет счетчик к итерируемому объекту. На выходе получается объект, содержащий кортежи, где первый элемент — это индекс, а второй — элемент из исходной последовательности.', 'Кортежи и множества'),
    ('Что такое множество?', 'Создать пустое множество можно только с помощью функции set() . Использование фигурных скобок создаст пустой словарь. empty_set = set() print(empty_set)', 'Кортежи и множества'),
    ('Что такое union?', 'Объединяет два множества и возвращает новое, содержащее все уникальные элементы. set1 = {1, 2, 3} set2 = {3, 4, 5} result = set1.union(set2) print(result) # Вывод: {1, 2, 3, 4, 5}', 'Кортежи и множества'),
    ('Что такое intersection?', 'Находит общие элементы двух множеств. set1 = {1, 2, 3} set2 = {3, 4, 5} result = set1.intersection(set2) print(result) # Вывод: {3}', 'Кортежи и множества'),
    ('Что такое difference?', 'Возвращает элементы, которые есть в одном множестве, но отсутствуют в другом. set1 = {1, 2, 3} set2 = {3, 4, 5} result = set1.difference(set2) print(result) # Вывод: {1, 2}', 'Кортежи и множества'),
    ('Что такое symmetric_difference?', 'Возвращает элементы, которые есть только в одном из множеств. set1 = {1, 2, 3} set2 = {3, 4, 5} result = set1.symmetric_difference(set2) print(result) # Вывод: {1, 2, 4, 5}', 'Кортежи и множества'),
    ('Что такое frozenset?', 'frozenset — это неизменяемая версия множества. Вы не можете добавлять или удалять элементы из frozenset , но он поддерживает операции, как и обычное множество.', 'Кортежи и множества'),


    ('Что такое pandas?', 'Программная библиотека на языке Python для обработки и анализа данных. Pandas - пакет для статистической обработки данных, по функциональности близкий к SQL и R. Включает в себя функциональность работы с базами данных и таблицами Excel. Работа pandas с данными строится поверх библиотеки NumPy, являющейся инструментом более низкого уровня. import pandas as pd, import numpy as np', 'Анализ данных'),
    ('Что такое series?', 'Структура/объект Series представляет из себя объект, похожий на одномерный массив (Python список (list)), но добавляются индексы для каждого элемента из списка - ассоциативный массив или словарь в Python. Индекс находится слева, а сам элемент справа. Если индекс явно не задан, то pandas автоматически создаёт RangeIndex от 0 до N-1, где N общее количество элементов. Также у Series есть тип хранимых элементов (в примере dtype: oat64). У объекта Series есть атрибуты через которые можно получить список элементов и индексы, это values и index . Отсутствующие данные записываются как np.nan . При вычислении среднего и других операций соответствующие функции не учитывают отсутствующие значения. arr = [1, 3, 4, np.nan, 6, 7] my_series = pd.Series(arr) my_series', 'Анализ данных'),
    ('Что такое dataframe?', 'Объект DataFrame - табличная структура данных. В любой таблице всегда есть строки и столбцы. Столбцы в объекте DataFrame это объекты Series, строки которых являются их непосредственными элементами.', 'Анализ данных'),
    ('Что такое NaN?', 'NaN - пропуски значений (пустые). В датасетах отсутствующее значения могут отображаться как вопросительный знак, NaN или просто пустая ячейка. Каждая ситуация с пропусками значений отличается и должна оцениваться по-разному в зависимости от задачи, например, для создания моделей машинного обучения, где-то нужно удалить строки, где-то заменить на определенные значения, например No info, где-то заменить на 0 или среднее значение', 'Анализ данных'),
    ('Как разбить данные на интервалы?', 'При работе с непрерывными числовыми данными часто бывает полезно разделить (to bin) данные на несколько сегментов для дальнейшего анализа - дискретизация данных. В pandas это можно сделать с помощью функций cut и qcut.', 'Анализ данных'),


    ('Что делают функции?', 'Функции - это важный инструмент программирования, позволяющий организовать код, сделать его читаемым, повторно использовать и легко изменять. В Python функция представляет собой блок кода, который выполняет определённую задачу быть вызван в любом месте программы.', 'Создание функций'),
    ('Как вернуть значение функции?', 'Часто функция должна вернуть результат. Для этого используется оператор return. Функция может возвращать любое значение: число, строку, список и т.д.', 'Создание функций'),
    ('Что такое docstring?', 'Docstring - это строка, которая помещается в начале тела функции и описывает её назначение. Эта строка становится частью объекта функции и может быть извлечена с помощью атрибута _doc_ или функции help()', 'Создание функций'),
    ('Что такое исключение?', 'Исключение это событие, которое возникает во время выполнения программы и нарушает ее нормальный поток. Например, если попытаться разделить число на ноль, Python сrенерирует исключение типа ZeroDivisionError', 'Создание функций'),
    ('Что такое блоки else и finally?', 'Кроме try и except, Python предоставляет два дополнительных блока: else и finally. Блок else выполняется, если в блоке try не возникло исключений. Блок finally выполняется в любом случае произошло исключение или нет', 'Создание функций'),
    ('Как использовать оператор raise?', 'Оператор raise в Python используется для явного вызова исключений. Это позволяет генерировать исключения в коде, когда возникает нештатная ситуация или ошибка. Можно использовать raise, чтобы передать информацию о проблеме вызывающему коду, что даёт возможность более гибко управлять потоками ошибок в программе.', 'Создание функций'),


    ('Что такое ООП?', 'Объектно-ориентированное программирование (ООП) парадигма программирования, в которой основными концепциями являются понятия объектов и классов.', 'Создание классов ООП'),
    ('Что такое класс?', 'Класс в объектно-ориентированном программировании выступает в роли чертежа для объекта. Класс = данные + методы. Класс это тип данных, состоящий из набора атрибутов (свойств) и методов функций для работы с этими атрибутами.', 'Создание классов ООП'),
    ('Что такое объекты?', 'Класс предоставляет чертеж объекта. Однако, чтобы на самом деле использовать объекты и методы класса, нужно создать объект из этого класса перед тем, как начать использовать его методы и атрибуты. Объект также называется экземпляром. Тем не менее, процесс создания объекта класса называется инициализация. В Python, чтобы создать объект класса, нужно написать название класса, с последующими открывающимися и закрывающимися скобками.', 'Создание классов ООП'),
    ('Что такое атрибуты класса?', 'Атрибуты класса это имена переменных вне функций и имена функций. Эти атрибуты наследуются всеми объектами, созданными на основе данного класса. Атрибуты обеспечивают свойства и поведение объекта. Объекты могут иметь атрибуты, которые создаются в теле метода, если данный метод будет вызван для конкретного объекта.', 'Создание классов ООП'),
    ('Как использовать метод init?', 'Большинство классов имеют специальный метод, который автоматически при создании объекта создает ему атрибуты. Т.е. вызывать данный метод не нужно, т.к. он сам запускается при вызове класса. (Вызов класса происходит, когда создается объект.) Такой метод называется конструктором класса и в языке программирования Python носит имя init. (В начале и конце по два знака подчеркивания.) Первым параметром, как и у любого другого метода, у init является self, на место которого подставляется объект в момент его создания. Второй и последующие (если есть) параметры заменяются аргументами, переданными в конструктор при вызове класса.', 'Создание классов ООП'),


    ('Что такое инкапсуляция?', 'Инкапсуляция это скрытие данных. Как правило, в объектно-ориентированном программировании один класс не должен иметь прямого доступа к данным другого класса. Вместо этого, доступ должен контролироваться через методы класса. Инкапсуляция — ограничение доступа к составляющим объект компонентам (методам и переменным). Инкапсуляция делает некоторые из компонент доступными только внутри класса. Чтобы предоставить контролируемый доступ к данным класса в Python, используются модификаторы доступа (public, private, protected) и свойства.', 'Инкапсуляция. Наследование. Полиморизм'),
    ('Что такое наследование?', 'Наследование позволяет создавать новый класс на основе уже существующего класса. Наряду с инкапсуляцией наследование является одним из краеугольных камней объектно-ориентированного программирования. Ключевыми понятиями наследования являются подкласс и суперкласс. Подкласс наследует от суперкласса все публичные атрибуты и методы. Суперкласс еще называется базовым (base class) или родительским (parent class), а подкласс производным (derived class) или дочерним (child class).', 'Инкапсуляция. Наследование. Полиморизм'),
    ('Что такое полиморизм?', 'Полиморфизм в объектно-ориентированном программировании это возможность обработки разных типов данных, т. е. принадлежащих к разным классам, с помощью ""одной и той же"" функции, или метода. На самом деле одинаковым является только имя метода, его исходный код зависит от класса. Кроме того, результаты работы одноименных методов могут существенно различаться. Поэтому в данном контексте под полиморфизмом понимается множество форм одного и того же слова имени метода.', 'Инкапсуляция. Наследование. Полиморизм'),

    ('Что такое data classes?', 'Часто в Python необходимо создавать классы в которых указаны только несколько переменных (атрибутов/полей). При этом, для реализации таких операций как сравнение экземпляров класса требуется создать несколько специальных методов, добавить сюда строковое представление объекта и для создания довольно простого класса, требуется много кода.', 'dataclasses'),
    ('Что такое параметры order и frozen?', '"При декорировании класса можно указать дополнительные параметры: frozen - контролирует можно ли менять значения переменных, order - если равен True, добавляет к классу методы _lt_, _le_, _gt_, _ge_', 'dataclasses'),
    ('Что делает функция field?', 'Все переменные, которые определены на уровне класса, по умолчанию, будут прописаны в методе _init_ и будут ожидаться как аргументы при создании экземпляра. Иногда в классе могут присутствовать переменные, которые вычисляются на основании аргументов _init_, а не передаются как аргументы. В этом случае, можно воспользоваться параметром init в field и вычислить значение динамически в _post_init_', 'dataclasses'),
]

cursor.executemany('''
INSERT INTO questions_answers (question, answer, category)
VALUES (?, ?, ?)               
''', data)
print('Данные добавлены.')

# Сохранение изменений
connection.commit()

# Закрытие соединения(закрывает соедиение с базой данных)
connection.close()
print("Данные успешно добавлены в базу данных.")
